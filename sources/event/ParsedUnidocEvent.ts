import { Allocator } from '@cedric-demongivert/gl-tool-collection'

import { UnidocPath } from '../path/UnidocPath'

import { UnidocEvent } from './UnidocEvent'

export class ParsedUnidocEvent {
  /**
  * Event that was parsed.
  */
  public readonly event : UnidocEvent

  /**
  * Begining location of the event into the parsed document.
  */
  public readonly from : UnidocPath

  /**
  * Ending location of the event into the parsed document.
  */
  public readonly to : UnidocPath

  /**
  * Index of this event into the stream of event generated by the parsed document.
  */
  public get index () : number {
    return this.event.index
  }

  public constructor () {
    this.event = new UnidocEvent()
    this.from = new UnidocPath()
    this.to = new UnidocPath()
  }

  /**
  * Deep copy an existing instance.
  *
  * @param toCopy - An instance to copy.
  */
  public copy (toCopy : ParsedUnidocEvent) : void {
    this.event.copy(toCopy.event)
    this.from.copy(toCopy.from)
    this.to.copy(toCopy.to)
  }

  /**
  * @return A deep copy of this event.
  */
  public clone () : ParsedUnidocEvent {
    const result : ParsedUnidocEvent = new ParsedUnidocEvent()
    result.copy(this)
    return result
  }

  /**
  * Reset this event instance in order to reuse it.
  */
  public clear () : void {
    this.event.clear()
    this.from.clear()
    this.to.clear()
  }

  /**
  * @see Object#toString
  */
  public toString () : string {
    let result : string = ''

    result += 'from '
    result += this.from
    result += ' to '
    result += this.to
    result += ' : '
    result += this.event.toString()

    return result
  }

  /**
  * @see Object.equals
  */
  public equals (other : any) : boolean {
    if (other == null) return false
    if (other === this) return true

    if (other instanceof ParsedUnidocEvent) {
      return other.event.equals(this.event) &&
             other.from.equals(this.from) &&
             other.to.equals(this.to)
    }

    return false
  }
}

export namespace ParsedUnidocEvent {
  /**
  * Return a deep copy of the given instance.
  *
  * @param toCopy - An instance to copy.
  *
  * @return A deep copy of the given instance.
  */
  export function copy (toCopy : ParsedUnidocEvent) : ParsedUnidocEvent
  export function copy (toCopy : null) : null
  export function copy (toCopy : undefined) : undefined
  export function copy (toCopy : ParsedUnidocEvent | null | undefined) : ParsedUnidocEvent | null | undefined {
    return toCopy == null ? toCopy : toCopy.clone()
  }

  export const ALLOCATOR : Allocator<ParsedUnidocEvent> = {
    /**
    * @see Allocator.copy
    */
    allocate () : ParsedUnidocEvent {
      return new ParsedUnidocEvent()
    },

    /**
    * @see Allocator.copy
    */
    copy (source : ParsedUnidocEvent, destination : ParsedUnidocEvent) : void {
      destination.copy(source)
    },

    /**
    * @see Allocator.clear
    */
    clear (instance : ParsedUnidocEvent) : void {
      instance.clear()
    }
  }

  export function equals (left : ParsedUnidocEvent, right : ParsedUnidocEvent) : boolean {
    return left == null ? left == right : left.equals(right)
  }
}
